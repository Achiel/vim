:colorscheme zenburn
set softtabstop=2
set shiftwidth=4
set tabstop=4
set expandtab
set ignorecase
set smartcase
set gdefault

set incsearch
set showmatch
set hlsearch


filetype plugin indent on
let g:syntastic_enable_signs=1

set t_Co=256
:syntax on

" Ctrl-j/k deletes blank line below/above, and Alt-j/k inserts.
nnoremap <silent><A-j> :set paste<CR>m`o<Esc>``:set nopaste<CR>
nnoremap <silent><A-k> :set paste<CR>m`O<Esc>``:set nopaste<CR>

let mapleader = ","
vmap r "_dP
inoremap jj <ESC>
:cmap W w
:cmap Q q
nnoremap <C-x> :q<CR>
:set number
nnoremap + maO<esc>`a
nnoremap _ mao<esc>`a
map <F2> <Esc>:1,$!xmllint --format -<CR>

map <leader>e :Errors<CR>
map <leader>E :Errors<CR><C-w>j:q<CR>

" window splitting:
nnoremap <leader>h <C-w>v<C-w>l
nnoremap <leader>v <C-w>s<C-w>l
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" buffer nav:
nnoremap <leader>n :bn<CR>
nnoremap <leader>p :bp<CR>

" statusline:
set statusline=
set statusline+=%-3.3n\                      " buffer number
set statusline+=%F\                          " filename
set statusline+=%h%m%r%w                     " status flags
set statusline+=\[%{strlen(&ft)?&ft:'none'}] " file type
set statusline+=%=                           " right align remainder
set statusline+=0x%-8B                       " character value
set statusline+=%-14(%l,%c%V%)               " line, character
set statusline+=%<%P                         " file position

" buffer quickview
nnoremap <leader>t :BufExplorer<CR>

" netrw stuff:
nnoremap <leader>. :Ve .<CR><CR>
nnoremap <leader>> :Se.<CR>

" taglist
nnoremap <leader>l :TlistToggle<CR>

:set hidden
:set undofile
:set undodir=/home/achiel/.vimundo/

" folding
nnoremap f za
nnoremap F zR
map a ggVG
nnoremap j zj
nnoremap k zk

" pdb stuff
python << EOF
import vim
def SetBreakpoint():
    import re
    nLine = int( vim.eval( 'line(".")'))

    strLine = vim.current.line
    strWhite = re.search( '^(\s*)', strLine).group(1)

    vim.current.buffer.append(
       "%(space)spdb.set_trace() %(mark)s Breakpoint %(mark)s" %
         {'space':strWhite, 'mark': '#' * 30}, nLine - 1)

    for strLine in vim.current.buffer:
        if strLine == "import pdb":
            break
    else:
        vim.current.buffer.append( 'import pdb', 0)
        vim.command( 'normal j1')

vim.command( 'map <f7> :py SetBreakpoint()<cr>')

def RemoveBreakpoints():
    import re

    nCurrentLine = int( vim.eval( 'line(".")'))

    nLines = []
    nLine = 1
    for strLine in vim.current.buffer:
        if strLine == "import pdb" or strLine.lstrip()[:15] == "pdb.set_trace()":
            nLines.append( nLine)
        nLine += 1

    nLines.reverse()

    for nLine in nLines:
        vim.command( "normal %dG" % nLine)
        vim.command( "normal dd")
        if nLine < nCurrentLine:
            nCurrentLine -= 1

    vim.command( "normal %dG" % nCurrentLine)

vim.command( "map <s-f7> :py RemoveBreakpoints()<cr>")
EOF
